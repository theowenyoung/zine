const Tokenizer = @This();
const std = @import("std");

// Counts the number of lines seen.
lines: u32 = 0,
want_comments: bool,
idx: u32 = 0,

pub const Token = struct {
    tag: Tag,
    loc: Loc,

    pub const Tag = enum {
        invalid,
        dot,
        comma,
        eql,
        colon,
        at,
        lp,
        rp,
        lb,
        rb,
        lsb,
        rsb,
        identifier,
        string,
        line_string,
        integer,
        float,
        null,
        true,
        false,
        top_comment_line,
        comment,
        eof,

        frontmatter, // ---

        // never generated by the tokenizer but
        // used elsewhere
        value,
        tag_name,

        pub fn lexeme(self: Tag) []const u8 {
            return switch (self) {
                .invalid => "(invalid)",
                .top_comment_line => "(top comment)",
                .comment => "(comment)",
                .dot => ".",
                .comma => ",",
                .eql => "=",
                .colon => ":",
                .at => "@",
                .lp => "(",
                .rp => ")",
                .lb => "{",
                .rb => "}",
                .lsb => "[",
                .rsb => "]",
                .identifier => "(identifier)",
                .tag_name => "(tag name)",
                .string => "(string)",
                .line_string => "(line string)",
                .integer => "(integer)",
                .float => "(float)",
                .value => "(value)",
                .null => "null",
                .true => "true",
                .false => "false",
                .frontmatter => "---",
                .eof => "EOF",
            };
        }
    };

    pub const Loc = struct {
        start: u32,
        end: u32,

        pub fn src(self: Loc, code: []const u8) []const u8 {
            return code[self.start..self.end];
        }

        pub const Line = struct { line: []const u8, start: u32 };
        pub fn line(loc: Loc, code: []const u8) Line {
            var idx = loc.start;
            const s = while (idx > 0) : (idx -= 1) {
                if (code[idx] == '\n') break idx + 1;
            } else 0;

            idx = loc.end;
            const e = while (idx < code.len) : (idx += 1) {
                if (code[idx] == '\n') break idx;
            } else code.len - 1;

            return .{ .line = code[s..e], .start = s };
        }

        pub const Selection = struct {
            start: Position,
            end: Position,

            pub const Position = struct {
                line: u32,
                col: u32,
            };
        };

        pub fn getSelection(self: Loc, code: []const u8) Selection {
            //TODO: ziglyph
            var selection: Selection = .{
                .start = .{ .line = 1, .col = 1 },
                .end = undefined,
            };

            for (code[0..self.start]) |c| {
                if (c == '\n') {
                    selection.start.line += 1;
                    selection.start.col = 1;
                } else selection.start.col += 1;
            }

            selection.end = selection.start;
            for (code[self.start..self.end]) |c| {
                if (c == '\n') {
                    selection.end.line += 1;
                    selection.end.col = 1;
                } else selection.end.col += 1;
            }
            return selection;
        }

        pub fn unquote(self: Loc, code: []const u8) ?[]const u8 {
            const s = code[self.start..self.end];
            const quoteless = s[1 .. s.len - 1];

            for (quoteless) |c| {
                if (c == '\\') return null;
            } else {
                return quoteless;
            }
        }

        pub fn unescape(
            self: Loc,
            gpa: std.mem.Allocator,
            code: []const u8,
        ) ![]const u8 {
            const s = code[self.start..self.end];
            return std.zig.string_literal.parseAlloc(gpa, s) catch return error.Syntax;
        }
    };
};

const State = enum {
    start,
    identifier,
    number,
    string,
    line_string_start,
    line_string,
    comment_start,
    comment,
    frontmatter,
};

pub fn peek(self: *Tokenizer, code: [:0]const u8) Token {
    const lines = self.lines;
    const idx = self.idx;
    const t = self.next(code);
    self.idx = idx;
    self.lines = lines;
    return t;
}

pub fn next(self: *Tokenizer, code: [:0]const u8) Token {
    var state: State = .start;
    var res: Token = .{
        .tag = .invalid,
        .loc = .{
            .start = self.idx,
            .end = undefined,
        },
    };

    while (self.idx < code.len) : (self.idx += 1) {
        const c = code[self.idx];
        switch (state) {
            .start => switch (c) {
                0 => {
                    res.tag = .eof;
                    res.loc.start = @intCast(code.len -| 1); // code.len may == 0
                    res.loc.end = @intCast(code.len);
                    break;
                },
                ' ', '\n', '\r', '\t' => {
                    if (c == '\n') self.lines += 1;
                    res.loc.start += 1;
                },
                '.' => {
                    self.idx += 1;
                    res.tag = .dot;
                    res.loc.end = self.idx;
                    break;
                },
                ',' => {
                    self.idx += 1;
                    res.tag = .comma;
                    res.loc.end = self.idx;
                    break;
                },
                '=' => {
                    self.idx += 1;
                    res.tag = .eql;
                    res.loc.end = self.idx;
                    break;
                },
                ':' => {
                    self.idx += 1;
                    res.tag = .colon;
                    res.loc.end = self.idx;
                    break;
                },
                '@' => {
                    self.idx += 1;
                    res.tag = .at;
                    res.loc.end = self.idx;
                    break;
                },
                '(' => {
                    self.idx += 1;
                    res.tag = .lp;
                    res.loc.end = self.idx;
                    break;
                },
                ')' => {
                    self.idx += 1;
                    res.tag = .rp;
                    res.loc.end = self.idx;
                    break;
                },
                '[' => {
                    self.idx += 1;
                    res.tag = .lsb;
                    res.loc.end = self.idx;
                    break;
                },
                ']' => {
                    self.idx += 1;
                    res.tag = .rsb;
                    res.loc.end = self.idx;
                    break;
                },
                '{' => {
                    self.idx += 1;
                    res.tag = .lb;
                    res.loc.end = self.idx;
                    break;
                },
                '}' => {
                    self.idx += 1;
                    res.tag = .rb;
                    res.loc.end = self.idx;
                    break;
                },

                'a'...'z', 'A'...'Z', '_' => state = .identifier,
                '-' => {
                    if (std.mem.startsWith(u8, code[self.idx..], "---")) {
                        self.idx += 2;
                        state = .frontmatter;
                    } else {
                        state = .number;
                    }
                },
                '0'...'9' => state = .number,
                '"', '\'' => state = .string,
                '\\' => state = .line_string_start,
                '/' => state = .comment_start,
                else => {
                    self.idx += 1;
                    res.tag = .invalid;
                    res.loc.end = self.idx;
                    break;
                },
            },
            .identifier => switch (c) {
                'a'...'z', 'A'...'Z', '_', '0'...'9' => continue,
                else => {
                    self.finishIdentifier(&res, code);
                    break;
                },
            },
            .number => switch (c) {
                '0'...'9', '.', '_', '-', '+', 'e', 'E' => continue,
                else => {
                    self.finishNumber(&res, code);
                    break;
                },
            },
            .string => switch (c) {
                0, '\n' => {
                    if (c == '\n') self.lines += 1;
                    self.idx += 1;
                    res.tag = .invalid;
                    res.loc.end = self.idx;
                    break;
                },

                '"', '\'' => if (c == code[res.loc.start] and
                    evenSlashes(code[0..self.idx]))
                {
                    self.idx += 1;
                    res.tag = .string;
                    res.loc.end = self.idx;
                    break;
                },
                else => {},
            },
            .line_string_start => switch (c) {
                '\\' => state = .line_string,
                else => {
                    self.idx += 1;
                    res.tag = .invalid;
                    res.loc.end = self.idx;
                    break;
                },
            },
            .line_string => switch (c) {
                0, '\n' => {
                    if (c == '\n') self.lines += 1;
                    res.tag = .line_string;
                    res.loc.end = self.idx;
                    self.idx += 1;
                    break;
                },
                else => {},
            },
            .comment_start => switch (c) {
                '/' => state = .comment,
                else => {
                    self.idx += 1;
                    res.tag = .invalid;
                    res.loc.end = self.idx;
                    break;
                },
            },
            .comment => switch (c) {
                0, '\n' => {
                    if (self.want_comments) {
                        self.finishComment(&res, code);
                        if (c == '\n') self.lines += 1;
                        self.idx += 1;
                        break;
                    } else {
                        state = .start;
                        res.loc.start = self.idx;
                        self.idx -= 1;
                    }
                },
                else => {},
            },

            .frontmatter => switch (c) {
                ' ', '\t', '\r' => {},
                0, '\n' => {
                    if (c == '\n') self.lines += 1;
                    self.idx += 1;
                    res.tag = .frontmatter;
                    res.loc.end = self.idx;
                    break;
                },
                else => {
                    self.idx += 1;
                    res.tag = .invalid;
                    res.loc.end = self.idx;
                    break;
                },
            },
        }
    } else {
        switch (state) {
            .start => res.tag = .eof,
            .comment => {
                if (self.want_comments) {
                    self.finishComment(&res, code);
                } else res.tag = .eof;
            },
            .identifier => self.finishIdentifier(&res, code),
            .number => self.finishNumber(&res, code),
            .frontmatter => res.tag = .frontmatter,
            else => res.tag = .invalid,
        }
        res.loc.end = self.idx;
    }

    return res;
}

fn evenSlashes(str: []const u8) bool {
    var i = str.len - 1;
    var even = true;
    while (true) : (i -= 1) {
        if (str[i] != '\\') break;
        even = !even;
        if (i == 0) break;
    }
    return even;
}

fn finishComment(self: Tokenizer, res: *Token, code: [:0]const u8) void {
    res.loc.end = self.idx;
    if (std.mem.startsWith(u8, res.loc.src(code), "//!")) {
        res.tag = .top_comment_line;
    } else {
        res.tag = .comment;
    }
}

fn finishIdentifier(self: Tokenizer, res: *Token, code: [:0]const u8) void {
    res.loc.end = self.idx;
    const src = res.loc.src(code);
    if (std.mem.eql(u8, src, "true")) {
        res.tag = .true;
    } else if (std.mem.eql(u8, src, "false")) {
        res.tag = .false;
    } else if (std.mem.eql(u8, src, "null")) {
        res.tag = .null;
    } else {
        res.tag = .identifier;
    }
}

fn finishNumber(self: Tokenizer, res: *Token, code: [:0]const u8) void {
    res.loc.end = self.idx;
    // TODO: implement this natively
    var minus_minus = res.loc;
    if (minus_minus.src(code)[0] == '-') {
        minus_minus.start += 1;
    }
    const check = std.zig.parseNumberLiteral(minus_minus.src(code));
    res.tag = switch (check) {
        .failure => .invalid,
        .int, .big_int => .integer,
        .float => .float,
    };
}

fn testCase(
    case: [:0]const u8,
    expected: []const Token.Tag,
    want_comments: bool,
) !void {
    var t: Tokenizer = .{ .want_comments = want_comments };

    var success = true;
    for (expected, 0..) |e, idx| {
        errdefer std.debug.print("failed at index: {}\n", .{idx});
        const tok = t.next(case);
        errdefer std.debug.print("bad token: {s} '{s}'\n", .{ @tagName(tok.tag), tok.loc.src(case) });
        try std.testing.expectEqual(e, tok.tag);

        if (e == .invalid) success = false;
    }

    try std.testing.expect(t.next(case).tag == .eof);
    if (success) {
        const lines: u32 = @intCast(std.mem.count(u8, case, "\n"));
        try std.testing.expectEqual(lines, t.lines);
    }
}

test "basics" {
    // zig fmt: off
    try testCase(
        \\.foo = "bar",
        \\.bar = false,
        \\.baz = { .bax = null },
    , &.{
        .dot, .identifier, .eql, .string, .comma,
        .dot, .identifier, .eql, .false, .comma,
        .dot, .identifier, .eql, .lb, .dot, .identifier, .eql, .null, .rb, .comma,
        .eof,
    }, false);
    // zig fmt: on

}

test "comments are skipped" {
    // zig fmt: off
    try testCase(
        \\.foo = "bar", // comment can be inline
        \\.bar = false,
        \\// bax must be null
        \\.baz = { 
        \\   // comment inside struct 
        \\   .bax = null 
        \\},
        \\// can end with a comment
        \\// or even two
    ,
     &.{
        .dot, .identifier, .eql, .string, .comma,
        .dot, .identifier, .eql, .false, .comma,
        .dot, .identifier, .eql, .lb, .dot, .identifier, .eql, .null, .rb, .comma,
        .eof,
    }, false);
    // zig fmt: on
}

test "invalid comments" {
    // zig fmt: off
    try testCase(
        \\/invalid
        \\.foo = "bar",
        \\.bar = false,
        \\.baz = { .bax = null },
    , &.{
        .invalid, .identifier,
        .dot, .identifier, .eql, .string, .comma,
        .dot, .identifier, .eql, .false, .comma,
        .dot, .identifier, .eql, .lb, .dot, .identifier, .eql, .null, .rb, .comma,
        .eof,
    }, false);
    // zig fmt: on

}

test "invalid string" {
    try testCase(
        \\["a "b"]
    , &.{ .lsb, .string, .identifier, .invalid, .eof }, false);
}

test "want comments + trailing" {
    try testCase(
        \\//! top comment
    , &.{ .top_comment_line, .eof }, true);
    try testCase(
        \\// comment
    , &.{ .comment, .eof }, true);
}

test "multiline string" {
    try testCase(
        \\.str =
        \\  \\fst
        \\  \\snd
        \\,
    , &.{ .dot, .identifier, .eql, .line_string, .line_string, .comma, .eof }, true);
}

test "frontmatter" {
    // zig fmt: off
    try testCase(
        \\---
        \\.foo = "bar",
        \\.bar = false,
        \\.baz = { .bax = null },
        \\---
    , &.{
        .frontmatter,
        .dot, .identifier, .eql, .string, .comma,
        .dot, .identifier, .eql, .false, .comma,
        .dot, .identifier, .eql, .lb, .dot, .identifier, .eql, .null, .rb, .comma,
        .frontmatter,
        .eof,
    }, false);
    // zig fmt: on

}

test "frontmatter newline" {
    // zig fmt: off
    try testCase(
        \\---
        \\.foo = "bar",
        \\.bar = false,
        \\.baz = { .bax = null },
        \\---
        \\
    , &.{
        .frontmatter,
        .dot, .identifier, .eql, .string, .comma,
        .dot, .identifier, .eql, .false, .comma,
        .dot, .identifier, .eql, .lb, .dot, .identifier, .eql, .null, .rb, .comma,
        .frontmatter,
        .eof,
    }, false);
    // zig fmt: on

}
test "comment in array" {
    // zig fmt: off
    try testCase(
        \\.aliases = [
        \\  "/another_index.html",
        \\  // None of these aliases should collide because they're all relative:
        \\  "foo/bar/baz.html",
        \\  "foo/bar/baz1.html",
        \\  // None of these aliases should collide because they're all relative:
        \\  // None of these aliases should collide because they're all relative:
        \\  // None of these aliases should collide because they're all relative:
        \\  "foo/bar.html",
        \\],
    , &.{
        .dot, .identifier, .eql, .lsb,
        .string, .comma,
        .comment,
        .string, .comma,
        .string, .comma,
        .comment,
        .comment,
        .comment,
        .string, .comma,
        .rsb, .comma,
        .eof,
    }, true);
    // zig fmt: on

}
